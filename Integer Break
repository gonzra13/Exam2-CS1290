Integer Break

1)Recursive Definition
This problem asks us to break a number n into the sum of at least two integers and max the product and return the product. Mathematically we are given n and we need to maximize
a1 * a2 * a3... a*k such that n = that sum and a1, a2,... ak > 0. The recursive definition looks like x^(n/x)

2)Dynamic Programming Breakdown
Using dynamic programming we can break the problem down by using the same equation from above and going through all of the row and all 
of the columns and keep adding the maximum sum. We then compare the best from the solutions we create using the equation we use. We 
then go through the array of our solutions and return the minimum.

3)IDEAL & Duke 7
Identify the Problem:
This problem asks us to break a number n into the sum of at least two integers and max the product and return the product.

Define Goals:
-Organize the numbers we are getting from each row and column to make sure we don't get another number from that row and that column
-Organize the other potential solutions into an array
-Do this all without over-applying the algorithm to solutions that we can rule out

Explore Solutions:
By using the dynamic programming approach instead of the recursive approach, I can organize the subproblems in order to optimize the overall problem without having to do more work.

Act:
Pseudocode

if n = 3
  return 2

maxProduct = 0

if n % 3 == 0
  maxProduct = power(3,(n//3))
  return max
elif (n%3==1)
  maxProduct = 2*2*power(3,(n/3) -1)
  retunr maxProduct
elif (n%3==2)
  maxProduct = 2 * power(3,n/3)
  return maxProduct
    
Learn:
Although ultimately dynamically we have more code than we would recursively, this one works best because
we create a new variable to store the optimal values as
